name: Deploy to Render

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio

    - name: Create necessary directories
      run: |
        mkdir -p logs
        mkdir -p temp
        mkdir -p assets
        mkdir -p secret

    - name: Lint with flake8
      run: |
        pip install flake8
        # E501: line too long, W503: line break before binary operator
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Type check with mypy
      run: |
        pip install mypy types-requests
        mypy app/ --ignore-missing-imports || true

    - name: Test imports
      run: |
        python -c "
        import sys
        sys.path.append('.')

        # Test individual module imports
        modules = [
            'app.config',
            'app.utils',
            'app.sheets',
            'app.slack',
            'app.search_news',
            'app.script_gen',
            'app.tts',
            'app.stt',
            'app.align_subtitles',
            'app.video',
            'app.metadata',
            'app.thumbnail',
            'app.drive',
            'app.youtube',
            'app.main',
            'app.web'
        ]

        for module in modules:
            try:
                __import__(module)
                print(f'‚úÖ {module} imported successfully')
            except ImportError as e:
                print(f'‚ùå {module} import failed: {e}')
                continue
            except Exception as e:
                print(f'‚ö†Ô∏è {module} import warning: {e}')
                continue

        print('Import test completed')
        "
      env:
        ANTHROPIC_API_KEY: sk-ant-test
        GEMINI_API_KEY: test-key
        ELEVENLABS_API_KEY: test-key
        GOOGLE_APPLICATION_CREDENTIALS: '{"type": "service_account"}'
        GOOGLE_SHEET_ID: test-id
        GOOGLE_DRIVE_FOLDER_ID: test-id
        YOUTUBE_CLIENT_SECRET: '{"web": {}}'
        DISCORD_WEBHOOK_URL: https://hooks.slack.com/test
        DEBUG: true
        LOG_LEVEL: INFO

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install security tools
      run: |
        pip install bandit safety

    - name: Run Bandit security scan
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/ || true

    - name: Check for known security vulnerabilities
      run: |
        pip install -r requirements.txt
        safety check || true

  deploy:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to Render
      uses: johnbeynon/render-deploy-action@v0.0.8
      with:
        service-id: ${{ secrets.RENDER_SERVICE_ID }}
        api-key: ${{ secrets.RENDER_API_KEY }}
        wait-for-success: true

  notify:
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Notify Discord
      if: ${{ needs.deploy.result == 'success' }}
      run: |
        curl -H "Content-Type: application/json" \
             -d '{
               "content": "üöÄ YouTuber App deployed successfully to Render!",
               "embeds": [{
                 "title": "Deployment Success",
                 "description": "GitHub Actions deployment completed",
                 "color": 3066993,
                 "fields": [
                   {"name": "Branch", "value": "${{ github.ref_name }}", "inline": true},
                   {"name": "Commit", "value": "${{ github.sha }}", "inline": true}
                 ]
               }]
             }' \
             ${{ secrets.DISCORD_WEBHOOK_URL }}

    - name: Notify Discord on failure
      if: ${{ needs.deploy.result == 'failure' }}
      run: |
        curl -H "Content-Type: application/json" \
             -d '{
               "content": "‚ùå YouTuber App deployment failed!",
               "embeds": [{
                 "title": "Deployment Failed",
                 "description": "GitHub Actions deployment encountered errors",
                 "color": 15158332,
                 "fields": [
                   {"name": "Branch", "value": "${{ github.ref_name }}", "inline": true},
                   {"name": "Commit", "value": "${{ github.sha }}", "inline": true}
                 ]
               }]
             }' \
             ${{ secrets.DISCORD_WEBHOOK_URL }}