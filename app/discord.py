"""DiscordÈÄöÁü•„É¢„Ç∏„É•„Éº„É´.

Provides asynchronous notification helpers so workflow execution does not block
when sending webhook messages.
"""

from __future__ import annotations

import asyncio
import logging
import time
from datetime import datetime
from typing import Any, Awaitable, Callable, Dict, Optional

import httpx

from app.config_prompts.settings import settings as cfg
from app.notifications.interfaces import Notifier

logger = logging.getLogger(__name__)


class DiscordNotifier(Notifier):
    """Discord webhook notifier supporting async + sync execution paths."""

    def __init__(
        self,
        webhook_url: Optional[str] = None,
        *,
        timeout: float = 10.0,
        client_factory: Optional[Callable[[], httpx.AsyncClient]] = None,
        run_sync: Optional[Callable[[Awaitable[bool]], bool]] = None,
    ) -> None:
        self.webhook_url = webhook_url if webhook_url is not None else cfg.discord_webhook_url
        self.enabled = bool(self.webhook_url)
        self._timeout = timeout
        self._client_factory = client_factory or self._default_client_factory
        self._run_sync = run_sync or asyncio.run

        if not self.enabled:
            logger.warning("Discord webhook URL not configured, notifications disabled")

    def _default_client_factory(self) -> httpx.AsyncClient:
        return httpx.AsyncClient(timeout=self._timeout)

    def _run_blocking(self, coroutine: Awaitable[bool]) -> bool:
        try:
            loop = asyncio.get_running_loop()
        except RuntimeError:
            return self._run_sync(coroutine)
        raise RuntimeError("notify_blocking cannot be used inside an active event loop")

    async def notify(
        self,
        message: str,
        *,
        level: str = "info",
        title: Optional[str] = None,
        fields: Optional[Dict[str, Any]] = None,
    ) -> bool:
        """Send a Discord notification asynchronously."""

        if not self.enabled:
            logger.info("[Discord disabled] %s", message)
            return False

        level_config = {
            "info": {"color": "#36a64f", "icon": "‚ÑπÔ∏è"},
            "success": {"color": "#36a64f", "icon": "‚úÖ"},
            "warning": {"color": "#ff9500", "icon": "‚ö†Ô∏è"},
            "error": {"color": "#ff0000", "icon": "‚ùå"},
            "debug": {"color": "#808080", "icon": "üîß"},
        }
        config = level_config.get(level, level_config["info"])
        icon = config["icon"]
        color = config["color"]

        embed_title = title or "YouTube Automation"
        payload = {
            "embeds": [
                {
                    "color": int(color.replace("#", ""), 16),
                    "title": f"{icon} {embed_title}",
                    "description": message,
                    "footer": {"text": "YouTube Automation System"},
                    "timestamp": datetime.fromtimestamp(time.time()).isoformat(),
                }
            ]
        }

        if fields:
            payload["embeds"][0]["fields"] = [
                {"name": key, "value": str(value), "inline": True}
                for key, value in fields.items()
            ]

        try:
            async with self._client_factory() as client:
                response = await client.post(self.webhook_url, json=payload)
                response.raise_for_status()
            logger.debug("Discord notification sent: %s - %s", level, message[:50])
            return True
        except httpx.HTTPStatusError as exc:
            request_url = exc.request.url if exc.request else "N/A"
            response_text = exc.response.text if exc.response else "<no response>"
            logger.error(
                "Failed to send Discord notification due to a client or server error: %s\n"
                "URL: %s\n"
                "Response: %s",
                exc,
                request_url,
                response_text,
            )
            return False
        except Exception as exc:  # noqa: BLE001
            logger.error("Failed to send Discord notification: %s", exc)
            return False

    def notify_blocking(
        self,
        message: str,
        *,
        level: str = "info",
        title: Optional[str] = None,
        fields: Optional[Dict[str, Any]] = None,
    ) -> bool:
        """Synchronously send a notification (runs its own event loop)."""

        return self._run_blocking(self.notify(message, level=level, title=title, fields=fields))

    async def notify_run_start(self, run_id: str, mode: str) -> bool:
        message = "ÂãïÁîªÁîüÊàê„ÇíÈñãÂßã„Åó„Åæ„Åó„Åü"
        fields = {"ÂÆüË°åID": run_id, "„É¢„Éº„Éâ": mode, "ÈñãÂßãÊôÇÂàª": time.strftime("%Y-%m-%d %H:%M:%S")}
        return await self.notify(message=message, level="info", title="üöÄ ÂÆüË°åÈñãÂßã", fields=fields)

    def notify_run_start_blocking(self, run_id: str, mode: str) -> bool:
        return self._run_blocking(self.notify_run_start(run_id, mode))

    async def notify_run_success(
        self,
        run_id: str,
        duration_sec: int,
        video_url: Optional[str] = None,
        title: Optional[str] = None,
    ) -> bool:
        duration_min = duration_sec // 60
        duration_sec_remain = duration_sec % 60

        message = "ÂãïÁîªÁîüÊàê„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ"
        fields: Dict[str, Any] = {
            "ÂÆüË°åID": run_id,
            "Âá¶ÁêÜÊôÇÈñì": f"{duration_min}ÂàÜ{duration_sec_remain}Áßí",
            "ÂÆå‰∫ÜÊôÇÂàª": time.strftime("%Y-%m-%d %H:%M:%S"),
        }

        if title:
            fields["ÂãïÁîª„Çø„Ç§„Éà„É´"] = title[:100] + "..." if len(title) > 100 else title

        if video_url:
            fields["ÂãïÁîªURL"] = video_url

        return await self.notify(message=message, level="success", title="‚úÖ ÂÆüË°åÂÆå‰∫Ü", fields=fields)

    def notify_run_success_blocking(
        self,
        run_id: str,
        duration_sec: int,
        video_url: Optional[str] = None,
        title: Optional[str] = None,
    ) -> bool:
        return self._run_blocking(
            self.notify_run_success(run_id, duration_sec, video_url=video_url, title=title)
        )

    async def notify_run_error(
        self, run_id: str, error_message: str, step: Optional[str] = None
    ) -> bool:
        message = "ÂãïÁîªÁîüÊàê„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü"
        fields: Dict[str, Any] = {
            "ÂÆüË°åID": run_id,
            "„Ç®„É©„ÉºÊôÇÂàª": time.strftime("%Y-%m-%d %H:%M:%S"),
            "„Ç®„É©„Éº": error_message[:200] + "..." if len(error_message) > 200 else error_message,
        }

        if step:
            fields["„Ç®„É©„ÉºÁÆáÊâÄ"] = step

        return await self.notify(message=message, level="error", title="‚ùå ÂÆüË°åÂ§±Êïó", fields=fields)

    def notify_run_error_blocking(
        self, run_id: str, error_message: str, step: Optional[str] = None
    ) -> bool:
        return self._run_blocking(self.notify_run_error(run_id, error_message, step))

    async def notify_step_progress(
        self, run_id: str, step_name: str, progress: Optional[str] = None
    ) -> bool:
        message = f"„Çπ„ÉÜ„ÉÉ„ÉóÂÆüË°å‰∏≠: {step_name}"
        fields: Dict[str, Any] = {"ÂÆüË°åID": run_id, "ÁèæÂú®ÊôÇÂàª": time.strftime("%H:%M:%S")}

        if progress:
            fields["Ë©≥Á¥∞"] = progress

        return await self.notify(message=message, level="info", title="‚è≥ ÈÄ≤Êçó", fields=fields)

    def notify_step_progress_blocking(
        self, run_id: str, step_name: str, progress: Optional[str] = None
    ) -> bool:
        return self._run_blocking(self.notify_step_progress(run_id, step_name, progress))

    async def notify_status(
        self,
        run_id: str,
        status: str,
        duration: Optional[int] = None,
        error: Optional[str] = None,
    ) -> bool:
        if status == "started":
            message = f"üöÄ ÂÆüË°åÈñãÂßã (ID: {run_id})"
            level = "info"
            fields = {"ÂÆüË°åID": run_id, "ÈñãÂßãÊôÇÂàª": time.strftime("%Y-%m-%d %H:%M:%S")}
        elif status == "completed":
            duration_str = f"{duration}Áßí" if duration else "‰∏çÊòé"
            message = f"‚úÖ ÂÆüË°åÂÆå‰∫Ü (ID: {run_id}, Âá¶ÁêÜÊôÇÈñì: {duration_str})"
            level = "success"
            fields = {
                "ÂÆüË°åID": run_id,
                "Âá¶ÁêÜÊôÇÈñì": duration_str,
                "ÂÆå‰∫ÜÊôÇÂàª": time.strftime("%Y-%m-%d %H:%M:%S"),
            }
        elif status == "error":
            message = f"‚ùå ÂÆüË°åÂ§±Êïó (ID: {run_id})"
            level = "error"
            fields = {
                "ÂÆüË°åID": run_id,
                "„Ç®„É©„ÉºÊôÇÂàª": time.strftime("%Y-%m-%d %H:%M:%S"),
            }
            if error:
                fields["„Ç®„É©„Éº"] = error[:200] + "..." if len(error) > 200 else error
        else:
            message = f"Áä∂ÊÖãÊõ¥Êñ∞: {status} (ID: {run_id})"
            level = "info"
            fields = {"ÂÆüË°åID": run_id, "„Çπ„ÉÜ„Éº„Çø„Çπ": status}

        return await self.notify(message=message, level=level, fields=fields)

    def notify_status_blocking(
        self, run_id: str, status: str, duration: Optional[int] = None, error: Optional[str] = None
    ) -> bool:
        return self._run_blocking(
            self.notify_status(run_id, status=status, duration=duration, error=error)
        )

    async def notify_api_quota_warning(self, api_name: str, usage_info: str) -> bool:
        message = f"{api_name} API„ÅÆ‰ΩøÁî®Èáè„Åå‰∏äÈôê„Å´Ëøë„Å•„ÅÑ„Å¶„ÅÑ„Åæ„Åô"
        fields = {
            "API": api_name,
            "‰ΩøÁî®ÈáèÊÉÖÂ†±": usage_info,
            "Á¢∫Ë™çÊôÇÂàª": time.strftime("%Y-%m-%d %H:%M:%S"),
        }
        return await self.notify(
            message=message, level="warning", title="‚ö†Ô∏è APIÂà∂ÈôêË≠¶Âëä", fields=fields
        )

    def notify_api_quota_warning_blocking(self, api_name: str, usage_info: str) -> bool:
        return self._run_blocking(self.notify_api_quota_warning(api_name, usage_info))

    async def notify_system_health(self, health_data: Dict[str, Any]) -> bool:
        all_ok = all(
            status.get("configured", False) or status.get("status") == "OK"
            for status in health_data.values()
            if isinstance(status, dict)
        )

        level = "success" if all_ok else "warning"
        message = "„Ç∑„Çπ„ÉÜ„É†„Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØÁµêÊûú"

        fields: Dict[str, Any] = {}
        for service, status in health_data.items():
            if isinstance(status, dict):
                if "configured" in status:
                    fields[service] = "‚úì Ë®≠ÂÆöÊ∏à„Åø" if status["configured"] else "‚úó Êú™Ë®≠ÂÆö"
                elif "status" in status:
                    fields[service] = f"{status['status']}"
                else:
                    fields[service] = str(status)
            else:
                fields[service] = str(status)

        return await self.notify(message=message, level=level, title="üè• „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ", fields=fields)

    def notify_system_health_blocking(self, health_data: Dict[str, Any]) -> bool:
        return self._run_blocking(self.notify_system_health(health_data))

    async def notify_daily_summary(self, summary_data: Dict[str, Any]) -> bool:
        total_runs = summary_data.get("total_runs", 0)
        successful_runs = summary_data.get("successful_runs", 0)
        failed_runs = summary_data.get("failed_runs", 0)
        avg_duration = summary_data.get("avg_duration_sec", 0)

        success_rate = (successful_runs / total_runs * 100) if total_runs > 0 else 0

        message = "Êú¨Êó•„ÅÆÂÆüË°å„Çµ„Éû„É™„Éº"
        fields: Dict[str, Any] = {
            "Á∑èÂÆüË°åÊï∞": f"{total_runs}Âõû",
            "ÊàêÂäü": f"{successful_runs}Âõû",
            "Â§±Êïó": f"{failed_runs}Âõû",
            "ÊàêÂäüÁéá": f"{success_rate:.1f}%",
            "Âπ≥ÂùáÂá¶ÁêÜÊôÇÈñì": f"{avg_duration // 60}ÂàÜ{avg_duration % 60}Áßí",
        }

        if "generated_videos" in summary_data:
            fields["ÁîüÊàêÂãïÁîªÊï∞"] = f"{len(summary_data['generated_videos'])}Êú¨"

        level = "success" if failed_runs == 0 else ("warning" if success_rate >= 80 else "error")

        return await self.notify(message=message, level=level, title="üìä Êó•Ê¨°„Çµ„Éû„É™„Éº", fields=fields)

    def notify_daily_summary_blocking(self, summary_data: Dict[str, Any]) -> bool:
        return self._run_blocking(self.notify_daily_summary(summary_data))

    async def test_notification(self) -> bool:
        return await self.notify(
            message="DiscordÈÄöÁü•„ÅÆ„ÉÜ„Çπ„Éà„É°„ÉÉ„Çª„Éº„Ç∏„Åß„Åô",
            level="info",
            title="üß™ „ÉÜ„Çπ„ÉàÈÄöÁü•",
            fields={
                "„ÉÜ„Çπ„ÉàÊôÇÂàª": time.strftime("%Y-%m-%d %H:%M:%S"),
                "„Ç∑„Çπ„ÉÜ„É†": "YouTube Automation",
            },
        )

    def test_notification_blocking(self) -> bool:
        return self._run_blocking(self.test_notification())


# „Ç∞„É≠„Éº„Éê„É´„Ç§„É≥„Çπ„Çø„É≥„Çπ
discord_notifier = DiscordNotifier()


# ÈùûÂêåÊúü/ÂêåÊúü„Ç¢„ÇØ„Çª„ÇπÈñ¢Êï∞
def notify(message: str, level: str = "info") -> bool:
    """Âü∫Êú¨ÈÄöÁü•„ÅÆÁ∞°ÊòìÈñ¢Êï∞ (ÂêåÊúü)."""

    return discord_notifier.notify_blocking(message, level=level)


def notify_run_start(run_id: str, mode: str) -> bool:
    """ÂÆüË°åÈñãÂßãÈÄöÁü•„ÅÆÁ∞°ÊòìÈñ¢Êï∞ (ÂêåÊúü)."""

    return discord_notifier.notify_run_start_blocking(run_id, mode)


def notify_run_success(
    run_id: str, duration_sec: int, video_url: Optional[str] = None, title: Optional[str] = None
) -> bool:
    """ÂÆüË°åÊàêÂäüÈÄöÁü•„ÅÆÁ∞°ÊòìÈñ¢Êï∞ (ÂêåÊúü)."""

    return discord_notifier.notify_run_success_blocking(run_id, duration_sec, video_url, title)


def notify_run_error(run_id: str, error_message: str, step: Optional[str] = None) -> bool:
    """ÂÆüË°å„Ç®„É©„ÉºÈÄöÁü•„ÅÆÁ∞°ÊòìÈñ¢Êï∞ (ÂêåÊúü)."""

    return discord_notifier.notify_run_error_blocking(run_id, error_message, step)


def notify_step_progress(run_id: str, step_name: str, progress: Optional[str] = None) -> bool:
    """„Çπ„ÉÜ„ÉÉ„ÉóÈÄ≤ÊçóÈÄöÁü•„ÅÆÁ∞°ÊòìÈñ¢Êï∞ (ÂêåÊúü)."""

    return discord_notifier.notify_step_progress_blocking(run_id, step_name, progress)


if __name__ == "__main__":
    print("Testing Discord notifications...")

    print(f"Discord enabled: {discord_notifier.enabled}")
    if discord_notifier.enabled:
        print(f"Webhook URL configured: {bool(discord_notifier.webhook_url)}")

        result = discord_notifier.test_notification_blocking()
        print(f"Test notification result: {result}")
    else:
        print("Discord not configured, skipping test")
